j#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb 27 19:35:22 2018
"""
#Polynomial Regression

# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

#Importing the dataset
dataset = pd.read_csv('Position_Salaries.csv')
X = dataset.iloc[:, 1:2].values  #Levels only
y = dataset.iloc[:, 2].values   #Salaries associated to the levels

#Create 2 models--Simple Linear Regress and Polynomial regression

# Fitting (Simple) Linear Regression to dataset
from sklearn.linear_model import LinearRegression
lin_reg = LinearRegression()
lin_reg.fit(X, y)

# Fitting Polynomial Regression to dataset
from sklearn.preprocessing import PolynomialFeatures
poly_reg = PolynomialFeatures(degree = 4) #changing degree will change slope of line. started with 2, optimal accuracy is 4
X_poly = poly_reg.fit_transform(X)
lin_reg2 = LinearRegression()
lin_reg2.fit(X_poly, y)

# Visualize the linear Regression results
plt.scatter(X, y, color = 'red') #real observation points
plt.plot(X, lin_reg.predict(X), color='blue') #predicted observation points
plt.title('Truth or Bluff (Linear Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()

# Visualize the Polynomial Regression results
X_grid = np.arange(min(X), max(X), 0.1)
X_grid = X_grid.reshape((len(X_grid),1)) #Smooths out the line by reducing the intervals. Without these two lines of code, it's a series of straight lines between points.
plt.scatter(X, y, color = 'red') #real observation points
plt.plot(X_grid, lin_reg2.predict(poly_reg.fit_transform(X_grid)), color='blue') #predicted observation points
plt.title('Truth or Bluff (Polynomial Regression)')
plt.xlabel('Position Level')
plt.ylabel('Salary')
plt.show()
